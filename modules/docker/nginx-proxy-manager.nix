{ pkgs, lib, ... }:

{
  virtualisation = {
    docker = {
      # This option enables docker, a daemon that manages linux containers
      enable = true;

      # Whether to periodically prune Docker resources
      autoPrune.enable = true;
    };

    oci-containers = {
      # The underlying Docker implementation to use
      backend = "docker";

      # OCI (Docker) containers to run as systemd services
      containers = {
        "nginx-proxy-manager" = {
          # OCI image to run
          image = "jc21/nginx-proxy-manager:latest";

          # List of volumes to attach to this container
          volumes = [
            "/mnt/docker/nginx-proxy-manager/data:/data:rw"
            "/mnt/docker/nginx-proxy-manager/letsencrypt:/etc/letsencrypt:rw"
          ];

          # Network ports to publish from the container to the outer host
          ports = [
            "80:80/tcp"
            "81:81/tcp"
            "443:443/tcp"
          ];

          # Logging driver for the container
          log-driver = "journald";

          # Extra options for podman run
          extraOptions = [
            "--network-alias=proxy-manager"
            "--network=nginx_default"
          ];
        };
      };
    };
  };

  systemd = {
    # Definition of systemd service units; see systemd.service(5)
    services = {
      "docker-nginx-proxy-manager" = {
        # Each attribute in this set specifies an option in the [Service]
        # section of the unit
        serviceConfig = {
          Restart = lib.mkOverride 90 "always";
          RestartMaxDelaySec = lib.mkOverride 90 "1m";
          RestartSec = lib.mkOverride 90 "100ms";
          RestartSteps = lib.mkOverride 90 9;
        };

        # If the specified units are started at the same time as
        # this unit, delay this unit until they have started
        after = [
          "docker-network-nginx_default.service"
        ];

        # Start the specified units when this unit is started, and stop this
        # unit when the specified units are stopped or fail
        requires = [
          "docker-network-nginx_default.service"
        ];

        # If the specified units are stopped or restarted, then this unit is
        # stopped or restarted as well
        partOf = [
          "docker-compose-nginx-root.target"
        ];

        # Units that want (i.e.depend on) this unit
        wantedBy = [
          "docker-compose-nginx-root.target"
        ];
      };

      "docker-network-nginx_default" = {
        # Packages added to the service's PATH environment variable
        path = with pkgs; [
          docker
        ];

        # Each attribute in this set specifies an option in the [Service]
        # section of the unit
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "docker network rm -f nginx_default";
        };

        # Shell commands executed as the service's main process
        script = ''
          docker network inspect nginx_default || docker network create nginx_default
        '';

        # If the specified units are stopped or restarted, then this unit is
        # stopped or restarted as well
        partOf = [
          "docker-compose-nginx-root.target"
        ];

        # Units that want (i.e.depend on) this unit
        wantedBy = [
          "docker-compose-nginx-root.target"
        ];
      };
    };

    # Definition of systemd target units; see systemd.target(5)
    targets = {
      "docker-compose-nginx-root" = {
        # Each attribute in this set specifies an option in the [Unit]
        # section of the unit
        unitConfig = {
          Description = "Root target generated by compose2nix.";
        };

        # Units that want (i.e.depend on) this unit
        wantedBy = [
          "multi-user.target"
        ];
      };
    };
  };
}
